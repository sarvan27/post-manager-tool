{"version":3,"file":"static/js/390.a7ba75e0.chunk.js","mappings":"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","sources":["components/posts/PostSearch.jsx","redux/actions/posts.js","components/posts/PostCardItem.jsx","components/posts/AddOrEditPost.jsx","components/posts/DeletePostFeedback.jsx","pages/Posts/index.jsx"],"sourcesContent":["import { TextField, Autocomplete, createFilterOptions, InputAdornment } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { Search } from '@mui/icons-material';\nimport { selectPost } from '../../redux/actions';\n\nconst filter = createFilterOptions();\n\nconst PostSearch = () => {\n  const dispatch = useDispatch();\n\n  const [value, setValue] = useState(null);\n  const allPosts = useSelector((state) => state.postReducer.allPosts);\n\n  const handleSelect = (value) => {\n    if (value?.id || value === null) setValue(value);\n    dispatch(selectPost(value));\n  };\n\n  return (\n    <div style={{ minHeight: 64 }}>\n      <Autocomplete\n        value={value}\n        onChange={(_, newValue) => handleSelect(newValue)}\n        filterOptions={(options, params) => {\n          const filtered = filter(options, params);\n\n          const { inputValue } = params;\n          // Suggest the creation of a new value\n          const isExisting = options?.some((option) => inputValue === option.title);\n          if (inputValue !== '' && !isExisting) {\n            filtered.push({\n              inputValue,\n              title: `Add \"${inputValue}\"`\n            });\n          }\n\n          return filtered;\n        }}\n        selectOnFocus\n        clearOnBlur\n        handleHomeEndKeys\n        id=\"posts-search-autocomplete-create\"\n        options={allPosts ? allPosts : []}\n        getOptionLabel={(option) => option?.title || ''}\n        renderOption={(props, option) => <li {...props}>{option.title}</li>}\n        sx={{ width: 300, float: 'right' }}\n        freeSolo\n        margin=\"dense\"\n        size=\"small\"\n        renderInput={(params) => (\n          <TextField\n            margin=\"dense\"\n            size=\"small\"\n            InputProps={{\n              ...params.InputProps,\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <Search />\n                </InputAdornment>\n              )\n            }}\n            {...params}\n            placeholder=\"Search for title\"\n          />\n        )}\n      />\n    </div>\n  );\n};\n\nexport default PostSearch;\n","import * as actionType from '../actionTypes';\n\nexport const fetchPosts = () => ({ type: actionType.FETCH_ALL_POST });\n\nexport const selectPost = (value) => ({ type: actionType.SELECT_POST, payload: value });\n\nexport const resetAddPost = () => ({ type: actionType.RESET_ADD_POST });\nexport const createNewPost = (value) => ({ type: actionType.CREATE_NEW_POST, payload: value });\n\nexport const setEditPost = (value) => ({ type: actionType.SET_EDIT_POST, payload: value });\nexport const resetEditPost = () => ({ type: actionType.RESET_EDIT_POST });\nexport const updatePost = (value) => ({ type: actionType.UPDATE_POST, payload: value });\n\nexport const setDeletePost = (value) => ({ type: actionType.SET_DELETE_POST, payload: value });\nexport const resetDeletePost = () => ({ type: actionType.RESET_DELETE_POST });\nexport const removePost = (feedback, id) => ({\n  type: actionType.DELETE_POST,\n  payload: { feedback, id }\n});\n","import { Delete, Edit } from '@mui/icons-material';\nimport { Avatar, Typography, Card, CardHeader, CardContent, IconButton } from '@mui/material';\nimport { blue } from '@mui/material/colors';\nimport { number, string } from 'prop-types';\nimport { memo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setDeletePost, setEditPost } from '../../redux/actions';\n\nconst PostCardItem = ({ userId, id, title, body }) => {\n  const dispatch = useDispatch();\n\n  const handleEdit = () => {\n    dispatch(setEditPost({ userId, id, title, body }));\n  };\n\n  const handleDelete = () => {\n    dispatch(setDeletePost({ userId, id, title, body }));\n  };\n\n  return (\n    <Card id={`post-item-${id}`} sx={{ marginBottom: 2 }}>\n      <CardHeader\n        avatar={\n          <Avatar\n            sx={{ width: 32, height: 32, fontSize: 14, bgcolor: blue[700] }}\n            aria-label=\"user-id\">\n            {userId}\n          </Avatar>\n        }\n        action={\n          <>\n            <IconButton aria-label=\"edit\" size=\"medium\" color=\"primary\" onClick={handleEdit}>\n              <Edit />\n            </IconButton>\n\n            <IconButton aria-label=\"edit\" size=\"medium\" color=\"error\" onClick={handleDelete}>\n              <Delete />\n            </IconButton>\n          </>\n        }\n        title={\n          <Typography variant=\"h6\" component=\"div\">\n            {title}\n          </Typography>\n        }\n      />\n      <CardContent sx={{ paddingTop: 0 }}>\n        <Typography>{body}</Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nPostCardItem.propTypes = {\n  userId: number.isRequired,\n  id: number.isRequired,\n  title: string.isRequired,\n  body: string.isRequired\n};\n\nexport default memo(PostCardItem);\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  TextField,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle\n} from '@mui/material';\nimport { useCallback, useEffect, useState } from 'react';\nimport { createNewPost, resetAddPost, resetEditPost, updatePost } from '../../redux/actions';\n\nconst AddOrEditPost = () => {\n  const dispatch = useDispatch();\n\n  const [data, setData] = useState({});\n\n  const addNew = useSelector((state) => state.postReducer.addNewPost);\n  const editPost = useSelector((state) => state.postReducer.editPost);\n\n  useEffect(() => {\n    setData({ ...addNew, userId: '', body: '' });\n  }, [addNew]);\n\n  useEffect(() => {\n    setData(editPost);\n  }, [editPost]);\n\n  const handleDataChange = useCallback((key, value) => {\n    let temp = { ...data };\n    temp[key] = value;\n    setData(temp);\n  });\n\n  const handleClose = () => {\n    if (data.id) {\n      dispatch(resetEditPost());\n    } else {\n      dispatch(resetAddPost());\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (data.id) {\n      dispatch(updatePost(data));\n    } else {\n      dispatch(createNewPost(data));\n    }\n  };\n\n  return (\n    <Dialog\n      fullWidth\n      maxWidth={'sm'}\n      open={Boolean(addNew?.title || editPost?.id)}\n      onClose={handleClose}>\n      <DialogTitle>{editPost?.id ? `Update post - ${editPost?.id}` : 'Add new post'}</DialogTitle>\n      <DialogContent>\n        <form id=\"form-add-or-update-post\" onSubmit={handleSubmit}>\n          <TextField\n            value={data?.userId ? data.userId : ''}\n            onChange={(e) => handleDataChange('userId', e.target.value)}\n            InputProps={{\n              inputProps: { min: 1 }\n            }}\n            size=\"small\"\n            autoFocus\n            margin=\"dense\"\n            label=\"User ID\"\n            type=\"number\"\n            fullWidth\n            required\n          />\n          <TextField\n            value={data?.title ? data.title : ''}\n            onChange={(e) => handleDataChange('title', e.target.value)}\n            size=\"small\"\n            margin=\"normal\"\n            label=\"Title\"\n            type=\"text\"\n            fullWidth\n            multiline\n            required\n          />\n          <TextField\n            value={data?.body ? data.body : ''}\n            onChange={(e) => handleDataChange('body', e.target.value)}\n            margin=\"normal\"\n            size=\"small\"\n            label=\"Body\"\n            type=\"text\"\n            fullWidth\n            multiline\n            rows={4}\n            required\n          />\n        </form>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose}>Cancel</Button>\n        <Button type=\"submit\" form=\"form-add-or-update-post\" color=\"primary\" variant=\"contained\">\n          {addNew?.title ? 'Create' : 'Update'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AddOrEditPost;\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  TextField,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  DialogContentText\n} from '@mui/material';\nimport { useEffect, useState } from 'react';\nimport { removePost, resetDeletePost } from '../../redux/actions';\n\nconst DeletePostFeedback = () => {\n  const dispatch = useDispatch();\n\n  const [feedback, setFeedback] = useState('');\n\n  const deletePost = useSelector((state) => state.postReducer.deletePost);\n\n  useEffect(() => {\n    setFeedback('');\n  }, [deletePost]);\n\n  const handleClose = () => {\n    dispatch(resetDeletePost());\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(removePost(feedback, deletePost.id));\n  };\n\n  return (\n    <Dialog fullWidth maxWidth={'sm'} open={Boolean(deletePost?.id)} onClose={handleClose}>\n      <DialogTitle>Are you sure you want to delete the below post ?</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          <strong>User ID:</strong>&nbsp;\n          {deletePost?.userId}\n          <br />\n          <strong>Title:</strong>&nbsp;{deletePost?.title}\n          <br />\n          <strong>Body:</strong>&nbsp;{deletePost?.body}\n        </DialogContentText>\n        <form id=\"form-delete-post\" onSubmit={handleSubmit}>\n          <TextField\n            value={feedback}\n            onChange={(e) => setFeedback(e.target.value)}\n            margin=\"normal\"\n            size=\"small\"\n            label=\"Feedback\"\n            type=\"text\"\n            fullWidth\n            multiline\n            rows={4}\n            required\n            helperText=\"Please provide valuable feedback to delete this post!\"\n          />\n        </form>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose}>Cancel</Button>\n        <Button type=\"submit\" form=\"form-delete-post\" color=\"primary\" variant=\"contained\">\n          {'Delete'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default DeletePostFeedback;\n","import { Container, Skeleton } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPosts } from '../../redux/actions';\nimport { useEffect } from 'react';\nimport PostSearch from '../../components/posts/PostSearch';\nimport PostCardItem from '../../components/posts/PostCardItem';\nimport AddOrEditPost from '../../components/posts/AddOrEditPost';\nimport DeletePostFeedback from '../../components/posts/DeletePostFeedback';\n\nfunction Posts() {\n  const dispatch = useDispatch();\n  const postLoading = useSelector((state) => state.postReducer.allPostsLoading);\n  const viewablePosts = useSelector((state) => state.postReducer.viewablePosts);\n\n  useEffect(() => {\n    dispatch(fetchPosts());\n  }, [dispatch]);\n\n  return (\n    <Container maxWidth=\"md\" style={{ marginTop: 64 }}>\n      {postLoading ? (\n        <>\n          {Array(10)\n            .fill(0)\n            .map((_, index) => (\n              <Skeleton key={index} height={66} width={'100%'} />\n            ))}\n        </>\n      ) : (\n        <>\n          <PostSearch />\n          <div>\n            {viewablePosts?.length > 0 &&\n              viewablePosts.map((obj, index) => <PostCardItem key={index} {...obj} />)}\n          </div>\n          <AddOrEditPost />\n          <DeletePostFeedback />\n        </>\n      )}\n    </Container>\n  );\n}\n\nexport default Posts;\n"],"names":["filter","createFilterOptions","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","value","setValue","allPosts","useSelector","state","postReducer","handleSelect","id","type","actionType","payload","selectPost","_jsx","style","minHeight","children","Autocomplete","onChange","_","newValue","filterOptions","options","params","filtered","inputValue","isExisting","some","option","title","push","concat","selectOnFocus","clearOnBlur","handleHomeEndKeys","getOptionLabel","renderOption","props","_objectSpread","sx","width","float","freeSolo","margin","size","renderInput","TextField","InputProps","startAdornment","InputAdornment","position","Search","placeholder","PostCardItem","_ref","userId","body","_jsxs","Card","marginBottom","CardHeader","avatar","Avatar","height","fontSize","bgcolor","blue","action","_Fragment","IconButton","color","onClick","Edit","Delete","Typography","variant","component","CardContent","paddingTop","memo","data","setData","addNew","addNewPost","editPost","useEffect","handleDataChange","useCallback","key","temp","handleClose","Dialog","fullWidth","maxWidth","open","Boolean","onClose","DialogTitle","DialogContent","onSubmit","e","preventDefault","createNewPost","target","inputProps","min","autoFocus","label","required","multiline","rows","DialogActions","Button","form","feedback","setFeedback","deletePost","DialogContentText","removePost","helperText","postLoading","allPostsLoading","viewablePosts","Container","marginTop","Array","fill","map","index","Skeleton","PostSearch","length","obj","AddOrEditPost","DeletePostFeedback"],"sourceRoot":""}